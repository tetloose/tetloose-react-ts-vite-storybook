@use '@styles/mixins/media-query' as *;
@use '@styles/mixins/rem' as *;
@use '@styles/settings/variables' as *;
@use 'sass:list';
@use 'sass:string';
@use 'sass:meta';
@use 'sass:map';

// calculate size based on layout spacing
@function size($size) {
  @return calc(vars(layout, spacing) * $size);
}

// Usage
// e.g. padding-top: 42px;
// 42 / vars(layout, spacing) -> 4px = 42 / 4 = 10.5
// padding-top: size(10.5)

@mixin sizing($css-property, $values) {
  @if vars(layout, rem) {
    @if meta.type-of($values) == 'list' {
      $result: ();

      @each $value in $values {
        $context: rem($value);
        $result: list.append($result, $context);
      }

      #{$css-property}: string.unquote('#{list.join($result, '')}');
    }
    @else {
      #{$css-property}: rem($values);
    }
  }
  @else {
    @if meta.type-of($values) == 'list' {
      @include mq($vw-max, max-width) {
        $result: ();

        @each $value in $values {
          $context: calc($value / $vw-context * $vw-adjustment-max);
          $result: list.append($result, $context);
        }

        #{$css-property}: string.unquote('#{list.join($result, '')}');
      }

      @include mq($vw-max) {
        $result: ();

        @each $value in $values {
          $context: rem($value);
          $result: list.append($result, $context);
        }

        #{$css-property}: string.unquote('#{list.join($result, '')}');
      }
    }
    @else {
      @include mq($vw-max, max-width) {
        #{$css-property}: calc($values / $vw-context * $vw-adjustment-max);
      }

      @include mq($vw-max) {
        #{$css-property}: rem($values);
      }
    }
  }
}

// Usage
// Single value
// @include sizing('padding-top', size(2));
// Multi value
// pass in values via css list array
// @include sizing('padding', [size(2.5), size(5), size(7.5), size(10)]);
// @include sizing('padding', [size(2.5), size(5), size(7.5)]);
// @include sizing('padding', [size(2.5), size(5)]);
// @include sizing('padding', [size(2.5), 0]);
