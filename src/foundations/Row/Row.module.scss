@use '@styles/settings' as *;

.row {
	$row: &;

	display: flex;
	width: 100%;
	margin-right: auto;
	margin-left: auto;

	&.direction-row {
		flex-direction: row;
	}

	&.direction-row-reverse {
		flex-direction: row-reverse;
	}

	&.direction-column {
		flex-direction: column;
	}

	&.direction-column-reverse {
		flex-direction: column-reverse;
	}

  &.justify-flex-start {
    justify-content: flex-start;
  }

  &.justify-center {
    justify-content: center;
  }

  &.justify-flex-end {
    justify-content: flex-end;
  }

  &.justify-space-between {
    justify-content: space-between;
  }

  &.justify-space-around {
    justify-content: space-around;
  }

  &.justify-space-evenly {
    justify-content: space-evenly;
  }

  &.align-flex-start {
    align-items: flex-start;
  }

	&.align-center {
		align-items: center;
	}

	&.align-flex-end {
		align-items: flex-end;
	}

	&.align-stretch {
		align-items: stretch;
	}

	&.align-baseline {
		align-items: baseline;
	}

  &.wrap-nowrap {
    flex-wrap: nowrap;
  }

  &.wrap-wrap {
    flex-wrap: wrap;
  }

  &.wrap-reverse {
    flex-wrap: wrap-reverse;
  }

  &.gutter-left {
    @include sizing('padding-left', size(calc(vars(layout, gutter) / vars(layout, spacing))));

    #{$row} {
      @include sizing('margin-left', size(-#{calc(vars(layout, gutter) / vars(layout, spacing))}));
    }
  }

  &.gutter-right {
    @include sizing('padding-right', size(calc(vars(layout, gutter) / vars(layout, spacing))));

    #{$row} {
      @include sizing('margin-right', size(-#{calc(vars(layout, gutter) / vars(layout, spacing))}));
    }
  }

  @extend %height;

	&__column {
		width: 100%;

    &.auto {
      width: auto;
    }

		&.gutter-left {
      @include sizing('padding-left', size(calc(vars(layout, gutter) / vars(layout, spacing))));

      #{$row} {
        @include sizing('margin-left', size(-#{calc(vars(layout, gutter) / vars(layout, spacing))}));
      }
		}

		&.gutter-right {
      @include sizing('padding-right', size(calc(vars(layout, gutter) / vars(layout, spacing))));

      #{$row} {
        @include sizing('margin-right', size(-#{calc(vars(layout, gutter) / vars(layout, spacing))}));
      }
		}

    @for $i from 0 through 12 {
      &.default-width-#{$i} {
        width: column-width(12, #{$i});
      }
    }

    @include mq( vars(breakpoint, sml)) {
      @for $i from 1 through 12 {
        &.sml-width-#{$i} {
          width: column-width(12, #{$i});
        }
      }
    }

    @include mq( vars(breakpoint, med)) {
      @for $i from 1 through 12 {
        &.med-width-#{$i} {
          width: column-width(12, #{$i});
        }
      }
    }

    @include mq( vars(breakpoint, lrg)) {
      @for $i from 1 through 12 {
        &.lrg-width-#{$i} {
          width: column-width(12, #{$i});
        }
      }
    }

    @include mq( vars(breakpoint, xlrg)) {
      @for $i from 1 through 12 {
        &.xlrg-width-#{$i} {
          width: column-width(12, #{$i});
        }
      }
    }

    @include mq( vars(breakpoint, xxlrg)) {
      @for $i from 1 through 12 {
        &.xxlrg-width-#{$i} {
          width: column-width(12, #{$i});
        }
      }
    }
	}
}
