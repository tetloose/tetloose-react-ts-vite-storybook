@use '@styles/settings' as *;

@mixin gutter($side, $context) {
  @include sizing('padding-#{$side}', size(calc(vars(layout, gutter) / vars(layout, spacing))));

  #{$context} {
    @include sizing('margin-#{$side}', size(-#{calc(vars(layout, gutter) / vars(layout, spacing))}));
  }
}

.row {
  $row: &;

  display: flex;
  width: 100%;
  margin-right: auto;
  margin-left: auto;

  @extend %direction;
  @extend %align;
  @extend %wrap;
  @extend %justify;
  @extend %height;

  &.gutter-left {
    @include gutter(left, $row);
  }

  &.gutter-right {
    @include gutter(right, $row);
  }

  &__column {
    width: 100%;

    &.gutter-left {
      @include gutter(left, $row);
    }

    &.gutter-right {
      @include gutter(right, $row);
    }

    &.auto {
      width: auto;
    }

    @for $i from 0 through vars(layout, columns) {
      &.default-width-#{$i} {
        width: column-width(vars(layout, columns), #{$i});
      }
    }

    @include mq( vars(breakpoint, sml)) {
      @for $i from 1 through vars(layout, columns) {
        &.sml-width-#{$i} {
          width: column-width(vars(layout, columns), #{$i});
        }
      }
    }

    @include mq( vars(breakpoint, med)) {
      @for $i from 1 through vars(layout, columns) {
        &.med-width-#{$i} {
          width: column-width(vars(layout, columns), #{$i});
        }
      }
    }

    @include mq( vars(breakpoint, lrg)) {
      @for $i from 1 through vars(layout, columns) {
        &.lrg-width-#{$i} {
          width: column-width(vars(layout, columns), #{$i});
        }
      }
    }

    @include mq( vars(breakpoint, xlrg)) {
      @for $i from 1 through vars(layout, columns) {
        &.xlrg-width-#{$i} {
          width: column-width(vars(layout, columns), #{$i});
        }
      }
    }

    @include mq( vars(breakpoint, xxlrg)) {
      @for $i from 1 through vars(layout, columns) {
        &.xxlrg-width-#{$i} {
          width: column-width(vars(layout, columns), #{$i});
        }
      }
    }
  }
}
